
----------------------------------views------------------------------------------

create table employee(id number primary key,name varchar2(30),department varchar2(40),gander varchar2(30));

insert into employee values(1,'raju','hr','male');
insert into employee values(2,'balu','planning','male');
insert into employee values(3,'anji','lab','male');
insert into employee values(4,'kireen','testing','male');
insert into employee values(5,'anjali','design','female');

select * from employee;
drop table employee;
----row level secururity
create view plannigdata as
select * from employee where department='hr';

--coloumn table


/*views are using to hiding the data low level security

creating the vertual table 
coloumn level security is high level security

the data store in different table
it is not modifing the data 

*/

select * from plannigdata;

--------------------------sequnces-----------------------------

create sequence emp_sequence
min value 1
max value 10
start with 1
increment by 1;


alter sequence emp_sequence
maxvalue 30;

alter sequence emp_sequence
increment by 3;

alter sequence emp_sequence
cache 5;

alter sequence emp_sequence
cycle;



drop sequence emp_sequence;

select emp_sequence.nextval from dual;




create sequence emp_sequence1
min value 1
start with 1
increment by 1;



create table employee1(id number primary key,name varchar2(30),department varchar2(40),gander varchar2(30));

insert into employee1 values(emp_sequence1.nextval,'raju','hr','male');
insert into employee1 values(emp_sequence1.nextval,'balu','planning','male');
insert into employee1 values(emp_sequence1.nextval,'anji','lab','male');
insert into employee1 values(emp_sequence1.nextval,'kireen','testing','male');
insert into employee1 values(emp_sequence1.nextval,'anjali','design','female');


select * from employee1;

select emp_sequence1.nextval from employee1;

drop sequence emp_sequence;


----------------------------synonym----------------------

/*
we want give the diffrent name of the table
but this is only for vertually changed 

this is only used for the changed the database object(tables)
*/
create table department(id number primary key,name varchar2(30),department varchar2(40),gander varchar2(30));

create sequence sec_department;
insert into department values(sec_department.nextval,'raju','hr','male');
insert into department values(sec_department.nextval,'balu','planning','male');
insert into department values(sec_department.nextval,'anji','lab','male');
insert into department values(sec_department.nextval,'kireen','testing','male');
insert into department values(sec_department.nextval,'anjali','design','female');




create synonym dept_detials
for department;
--update synonym name
create synonym dep_details1
for department;

select * from department;


---------------------------------Analytical function-------------------------------
create table department1(id number primary key,name varchar2(30),department varchar2(40),gander varchar2(30),salary float);

create sequence sec_department1;
insert into department1 values(sec_department1.nextval,'raju','hr','male',50000);
insert into department1 values(sec_department1.nextval,'balu','planning','male',8727);
insert into department1 values(sec_department1.nextval,'anji','lab','male'70000);
insert into department1 values(sec_department1.nextval,'kireen','testing','male',7000);
insert into department1 values(sec_department1.nextval,'anjali','design','female',7000);



select  * from department1;


select  salary from department1;

--to eleminate the duplicate values from the table coloumn for using the distinct key word
select  distinct salary from department1;


--hightest salary for all coloums
select  first_value(salary) over(order by salary desc)from department1;
---using distinct key eliminate duplicate values
select  distinct first_value(salary) over(order by salary desc)from department1;


select  distinct first_value(salary) over(order by salary asc)from department1;













































----joins in sql---
--pl/sql -----

If if we want to retrieve the data from more than one table that are joined with each other with the help of foreign key relationship.
1.inner join - returns  rows common between two tables.
2.left join - returns common rows b/w tow tables + non mathcing row from left table
3.right join - returns common rows b/n tables + non mathching row from right table
4.full join - rows common + rows from left + rows from right.
5.cross join - 

create table department(mst_dept_id number primary key, dep_name varchar2(20));

insert into department values(1,'hr');
insert into department values(2,'admin');
insert into department values(3,'payroll');
insert into department values(4,'hr');



create table employee(mst_emp_id number primary key, emp_name varchar2(20), gender varchar2(10),salary float,
dept_id number,
constraints fk_employee_department foreign key(dept_id) references department(mst_dept_id));


insert into employee values(1,'john','m',30000,1);
insert into employee values(2,'nilima','f',49990,2);
insert into employee values(3,'bala','m',40000,2);
insert into employee values(4,'krishna','m',60000,2);
insert into employee values(5,'prasad','m',70000,3);
insert into employee values(6,'prasad','m',70000,null);


select * from employee;
select * from department;


--syntax
select [coumn list]
from [table name-1]
join [table name-2]
on condition

---------inner join----
--all the coloumns
select * from employee inner join department on department.mst_dept_id=employee.dept_id;
--or
select * from employee join department on department.mst_dept_id=employee.dept_id;


---some perticular coloumns
select emp_name,gender,salary,dep_name from employee inner join department on department.mst_dept_id=employee.dept_id;


-------right join ( common rows + non matching row from right table)----
--syntax--
select [coumn list]
from [table name-1] - left table
join [table name-2] - right table
on condition


select * from employee;
select * from department;

select * from employee right join department on department.mst_dept_id=employee.dept_id;

--inter change table names:-
select * from department right join employee on department.mst_dept_id=employee.dept_id;



----left join

--syntax--
select [coumn list]
from [table name-1] - left table
join [table name-2] - right table
on condition

select * from employee left join department on department.mst_dept_id=employee.dept_id;

------fulll join-----( common rows + non matching row from right table + non matching row from right table)

select * from employee full join department on department.mst_dept_id=employee.dept_id;


------cross join (each row of the employee * each row of the department)----
select * from employee cross join department 










